workflows:
  ios_release_unsigned:
    name: iOS Release (unsigned IPA für Sideloadly)
    max_build_duration: 60
    instance_type: mac_mini_m2

    environment:
      xcode: 16.4   # passt zum Xcode-16-Projektformat
      vars:
        SCHEME: "ProcureFinder"
        PROJECT: "ProcureFinder.xcodeproj"

    scripts:
      - name: Repo-Übersicht (Debug)
        script: |
          set -euxo pipefail
          pwd
          git rev-parse --short HEAD || true
          ls -la
          echo "---- top-level ----"
          find . -maxdepth 2 -type f -name "*.xcodeproj" -o -name "project.yml" -print || true

      - name: Falls nötig: XcodeGen und .xcodeproj erzeugen
        script: |
          set -euxo pipefail
          if [ -d "$PROJECT" ]; then
            echo "✅ $PROJECT gefunden"
          else
            if [ -f "project.yml" ] || [ -f "ProcureFinder/project.yml" ] || [ -f "Project.yml" ]; then
              echo "ℹ️  $PROJECT fehlt, generiere mit XcodeGen…"
              brew list xcodegen >/dev/null 2>&1 || brew install xcodegen
              xcodegen generate
              test -d "$PROJECT" || { echo "❌ Konnte $PROJECT nicht erzeugen"; exit 66; }
            else
              echo "❌ Weder $PROJECT noch project.yml vorhanden"; exit 66
            fi
          fi

      - name: Build .app (unsigned, Device)
        script: |
          set -euxo pipefail
          DERIVED="$CM_BUILD_DIR/Derived"
          xcodebuild \
            -project "$PROJECT" \
            -scheme "$SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_IDENTITY= \
            -derivedDataPath "$DERIVED" \
            build

          APP_DIR="$DERIVED/Build/Products/Release-iphoneos/${SCHEME}.app"
          test -d "$APP_DIR" || { echo "❌ Built .app nicht gefunden: $APP_DIR"; ls -la "$DERIVED/Build/Products/Release-iphoneos" || true; exit 65; }

          echo "Info.plist prüfen…"
          /usr/libexec/PlistBuddy -c 'Print CFBundleIdentifier' "$APP_DIR/Info.plist" || { echo "❌ CFBundleIdentifier fehlt"; exit 67; }
          BUNDLE_ID=$(/usr/libexec/PlistBuddy -c 'Print CFBundleIdentifier' "$APP_DIR/Info.plist")
          case "${BUNDLE_ID:-}" in
            ""|\$\(*|\$\{*|*PRODUCT_BUNDLE_IDENTIFIER*)
              echo "❌ CFBundleIdentifier ist leer/unerledigt: '$BUNDLE_ID'"; exit 67;;
            *)
              echo "✅ CFBundleIdentifier: $BUNDLE_ID";;
          esac

      - name: Unsigned IPA für Sideloadly paketieren
        script: |
          set -euxo pipefail
          DERIVED="$CM_BUILD_DIR/Derived"
          APP_DIR="$DERIVED/Build/Products/Release-iphoneos/${SCHEME}.app"

          rm -rf Payload ProcureFinder-unsigned.ipa ProcureFinder.app.zip
          mkdir -p Payload
          # exaktes gebautes .app übernehmen
          rsync -a --delete "$APP_DIR" "Payload/"

          # Sicherheitscheck: Info.plist in der Payload
          /usr/libexec/PlistBuddy -c 'Print CFBundleIdentifier' "Payload/${SCHEME}.app/Info.plist" >/dev/null

          # Artefakte erstellen
          (cd Payload && zip -qry "../ProcureFinder-unsigned.ipa" .)
          zip -qry "ProcureFinder.app.zip" "Payload/${SCHEME}.app"

      - name: Artefakte ablegen
        script: |
          set -euxo pipefail
          mkdir -p "$CM_ARTIFACTS"
          mv ProcureFinder-unsigned.ipa "$CM_ARTIFACTS/"
          mv ProcureFinder.app.zip "$CM_ARTIFACTS/"

    artifacts:
      - ProcureFinder-unsigned.ipa
      - ProcureFinder.app.zip




